---
title: "Lab: List Processing"
author: "Tyler Davis"
format: html
number-sections: true
number-depth: 2
editor: 
  markdown: 
    wrap: sentence
---

::: callout
You can see the purpose of this assignment as well as the skills and knowledge you should be using and acquiring, in the [Transparency in Learning and Teaching (TILT)](tilt.qmd) document in this repository.
The TILT document also contains a checklist for self-reflection that will provide some guidance on how the assignment will be graded.
:::

# Data Source

JSON data files for this assignment were obtained from the TVMaze API for three different Doctor Who series as well as two different spin-offs.

-   Dr. Who [2023-2025](https://www.tvmaze.com/shows/72724/doctor-who)
-   Dr. Who [2005-2022](https://www.tvmaze.com/shows/210/doctor-who)
-   Dr. Who [1963-1996](https://www.tvmaze.com/shows/766/doctor-who)
-   [The Sarah Jane Adventures (2007-2020)](https://www.tvmaze.com/shows/970/the-sarah-jane-adventures)
-   [Torchwood (2006-2011)](https://www.tvmaze.com/shows/659/torchwood)
-   [Torchwood: Web of Lies (2011)](https://www.tvmaze.com/shows/26694/torchwood-web-of-lies)

# Warming Up

For this portion of the assignment, only work with the canonical Dr. Who files (drwho2023.json, drwho2005.json, drwho1963.json).

## Parse the file

Add a code chunk that will read each of the JSON files in.
Store the data in a `drwhoYYYY` object, where `YYYY` is the first year the series began to air.
How are the data objects stored?

```{r}

library(tibble)
library(dplyr)
library(tidyr)
library(purrr)
library(jsonlite)

drwho2023 <- read_json("drwho-72724.json")
drwho2005 <- read_json("drwho-210.json")
drwho1963 <- read_json("drwho-766.json")
```

## Examining List Data Structures

Create a nested markdown list showing what variables are nested at each level of the JSON file.
Include an 'episode' object that is a stand-in for a generic episode (e.g. don't create a list with all 700+ episodes in it, just show what a single episode has).
Make sure you use proper markdown formatting to ensure that the lists are rendered properly when you compile your document.

Hint: The `prettify()` function in the R package `jsonlite` will spit out a better-formatted version of a JSON file.

```{r}

  prettify(readLines("drwho-210.json")))

```

------------------------------------------------------------------------

List here

1.  Episode Id
2.  URL to go to the episode
3.  Name of the episode
4.  season number
5.  episode number
6.  episode type
7.  air date
8.  air stamp
9.  run time
10. rating
    1.  rating average
11. image
    1.  image medium
    2.  image original
12. summary
13. links
    1.  links shelf
        1.  links shelf href
    2.  links show
        1.  links show href
        2.  links show name

------------------------------------------------------------------------

Is there any information stored in the list structure that you feel is redundant?
If so, why?

I feel that air date and air time are a subset of air stamp so we only need air stamp.
I also feel that the link list structure is a bit complicated for no reason and it could be simplified as there is nothing stored in the section links shelf or show.

## Develop A Strategy

Consider what information you would need to examine the structure of Dr. Who episodes over time (show runtime, season length, specials) as well as the ratings, combining information across all three data files.

Sketch one or more rectangular data tables that look like your expected output.
Remember that if you link to an image, you must link to something with a picture extension (`.png`, `.jpg`), and if you reference a file it should be using a local path and you must also add the picture to your git repository.

------------------------------------------------------------------------

![Sketch for tidy data formation](images/351%20hw%202%20-%20page%201.png)

------------------------------------------------------------------------

What operations will you need to perform to get the data into a form matching your sketch?
Make an ordered list of steps you need to take.

------------------------------------------------------------------------

1.  read in json as a date frame with fromJson
2.  create a series variable and check for duplicates
3.  row bind the three data frames
4.  select columns need for show analysis
5.  un nest the rating variable

## Implement Your Strategy

Add a code chunk that will convert the JSON files into the table(s) you sketched above.
Make sure that the resulting tables have the correct variable types (e.g., dates should not be stored as character variables).

Print out the first 5 rows of each table that you create (but no more)!

```{r}
library(jsonlite)
library(tidyverse)
dat_1963 <- fromJSON("drwho-766.json")
row.names(dat_1963)
dat_1963$series <- 1
sum(duplicated(dat_1963$id))
dat_2005 <- fromJSON("drwho-210.json")
sum(duplicated(dat_2005$id))
dat_2005$series <- 2
dat_2023 <- fromJSON("drwho-72724.json")
dat_2023$series <- 3
sum(duplicated(dat_2023$id))
total_show <- bind_rows(dat_1963,dat_2005,dat_2023)

total_show_info <- total_show %>%
    select(1,4:11,15) %>%
    unnest(rating)
head(total_show_info,5)
```

## Examining Episode Air Dates

Visually represent the length of time between air dates of adjacent episodes within the same season, across all seasons of Dr. Who.
You may need to create a factor to indicate which Dr. Who series is indicated, as there will be a Season 1 for each of the series.
Your plot must have appropriate labels and a title.

------------------------------------------------------------------------

```{r}

library(lubridate)

total_date <- total_show_info %>%
    group_by(season,series)%>%
    mutate(date = as.Date(airdate)) %>%
    mutate(date_diff = date - lag(date)) %>%
    filter(!is.na(date_diff))
library(ggplot2)

total_date %>%
    filter(series ==1 & season ==1) %>%
    ggplot(aes(x = number,y = factor(date_diff),group = factor(series),color = factor(date_diff))) + geom_point() + geom_line() + labs(
        title = "Date Difference in Episodes in season 1 of series 1",
        x = "episode number",
        y = "days between episodes",
        color = "difference in days of episode relase"
    )

total_date %>%
    filter(series ==1) %>%
    ggplot(aes(x = factor(season),y = factor(date_diff),fill = factor(date_diff))) + geom_bar(position = "dodge",stat = "identity") + labs(
        title = "Occurances of Date Difference in Episodes in Series 1",
        x = "season",
        y = "days between episodes",
        fill = "episode relase difference"
    )

total_date %>%
    filter(series ==2) %>%
    ggplot(aes(x = factor(season),y = factor(date_diff),fill = factor(date_diff))) + geom_bar(position = "dodge",stat = "identity") + labs(
        title = "Occurances of Date Difference in Episodes in Series 2",
        x = "season",
        y = "days between episodes",
        fill = "episode relase difference"
    )

total_date %>%
    filter(series ==3) %>%
    ggplot(aes(x = factor(season),y = factor(date_diff),fill = factor(date_diff))) + geom_bar(position = "dodge",stat = "identity") + labs(
        title = "Occurances of Date Difference in Episodes in Series 3",
        x = "season",
        y = "days between episodes",
        fill = "episode relase difference"
    )


total_date %>%
    ggplot(aes(x = factor(season),y = factor(date_diff),fill = factor(date_diff))) + geom_bar(position = "dodge",stat = "identity") + facet_grid(~series) + labs(
        title = "Occurances of Date Difference in Episodes Across Series",
        x = "season",
        y = "days between episodes",
        fill = "episode relase difference"
    )

```

------------------------------------------------------------------------

In 2-3 sentences, explain what conclusions you might draw from the data.
What patterns do you notice?
Are there data quality issues?

I can conclude that most of the episodes are released in a weekly pattern across all series with few exceptions.
One of the episodes was released 182 days after the previous episode in series 2 season 7.
There could be a data quality issue there.

# Timey-Wimey Series and Episodes

## Setting Up

In this section of the assignment, you will work with all of the provided JSON files.
Use a functional programming approach to read in all of the files and bind them together.

------------------------------------------------------------------------

```{r}


time_1 <- fromJSON("torchwood-659.json")
time_2 <- fromJSON("torchwood-26694.json")
files <- list.files(pattern = "\\.json$", recursive = TRUE)
series_form <- data.frame(files)

read_timey <- function(x){
    library(jsonlite)
    library(dplyr)
    library(purrr)
    data_list <- map2(x, seq_along(x), ~ {
  df <- fromJSON(.x)
  df$series <- .y      # .y is the current index
  df
})
    data_combined <- bind_rows(data_list)
    return(data_combined)
    }

combined_show <- read_timey(files)
head(combined_show)
```

------------------------------------------------------------------------

Then, use the processing code you wrote for the previous section to perform appropriate data cleaning steps.
At the end of the chunk, your data should be in a reasonably tidy, rectangular form with appropriate data types.
Call this rectangular table `whoverse`.

------------------------------------------------------------------------

```{r}

library(xml2)

clean_combined <- combined_show %>%
    unnest(cols = c(rating,image,`_links`)) 
new_clean <- clean_combined %>%
    unnest(cols = c(show,self), names_sep = "_")
whoverse <- new_clean %>%
    rowwise %>%
    mutate(summ_clean =  gsub("<.*?>", "", summary)) %>%
    select(-summary)
    
str(whoverse)
head(whoverse,5)
```

------------------------------------------------------------------------

## Air Time

Investigate the air time of the episodes relative to the air date, series, and season.
It may help to know that the [watershed](https://en.wikipedia.org/wiki/Watershed_(broadcasting)) period in the UK is 9:00pm - 5:30am.
Content that is unsuitable for minors may only be shown during this window.
What conclusions do you draw about the target audience for each show?

How can you explain any shows in the Dr. Who universe which do not have airtimes provided?

```{r}

airtime <- whoverse %>%
    group_by(series, season) %>%
    summarise(uniq_airtimes = n_distinct(airtime),airtime,airdate,runtime,average,number)

library(ggplot2)

diff_air <- airtime %>%
    group_by(series) %>%
    count(airtime) %>%
    ggplot(aes(x = factor(airtime), y = n, fill = factor(series))) + geom_bar(position = "dodge", stat = "identity") + labs(
        title = "Count of airtimes for each series",
        x = "airtime",
        y = "count",
        fill = "series"
    ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
diff_air
```

It can clearly be show that the air time for the thee main Dr. Who series (1 - 3) are the prime time slot.
The Sarah Jane show is exclusively at 5:15 and the more inappropriate series (6) is shown in the watershed window.
This all makes sense with the information that we know about each show!
We also see that we have series 5 which has no airtime, this is due to the fact that this was a special series and had a longer run time.

## Another Layer of JSON

Use the show URL (`_links` \> `show` \> `href`) to read in the JSON file for each show.
As with scraping, it is important to be polite and not make unnecessary server calls, so pre-process the data to ensure that you only make one server call for each show.
You should use a functional programming approach when reading in these files.

------------------------------------------------------------------------

```{r}

read_epi <- function(x){
df1 <- fromJSON(x,flatten = TRUE)
data <- enframe(unlist(df1))

new_dat <- data %>%
    pivot_wider(names_from = "name", values_from = "value")
return(new_dat)
}

trial <- read_epi(new_clean$show_href[1])
episode_data <- map_dfr(unique(new_clean$show_href),read_epi)

head(episode_data,5)
```

------------------------------------------------------------------------

What keys would you use to join this data with the `whoverse` episode level data?
Explain.

> The keys that I would use to combine this with the who verse data would be series wide information.
> This is because this data is for each series as a whole.
> What we could do is give each of the series a new id based on the ids for the episode data.
> We then can use this id to join the who verse data and the episode data.

## Explore!

Use the data you've assembled to answer a question you find interesting about this data.
Any graphics you make should have appropriate titles and axis labels.
Tables should be reasonably concise (e.g. don't show all 900 episodes in a table), generated in a reproducible fashion, and formatted with markdown.
Any results (graphics, tables, models) should be explained with at least 2-3 sentences.

If you're stuck, consider examining the frequency of words in the episode descriptions across different series or seasons.
Or, look at the episode guest cast by appending `/guestcast/` to the episode URL and see whether there are common guests across different seasons.

------------------------------------------------------------------------

I would like to look deeper into series and season information and if anything interesting can be parsed out.

------------------------------------------------------------------------

Code goes here -- once you output a result, you should explain it using markdown text, and then start a new code chunk to continue your exploration.

```{r}

season_series <- whoverse %>%
    group_by(series,season) %>%
    summarise(avg_rating = round(mean(average),2), num_epi = unique(n()), types = list(unique(type)), avg_runtime = round(mean(runtime),2),show_name = first(show_name),date = first(airdate)) 
```

```{r}
season_dat <- season_series %>%
    mutate(date = as.Date(date,format = "%Y-%m-%d")) %>%
    group_by(series) %>%
    ggplot(aes(x = season, y = avg_rating, color = factor(series)))+ geom_point() + geom_line() + ylim(0,10) + labs(
        title = "Average rating across seasons",
        x = "season",
        y = "average rating",
        color = "Series"
    )
season_dat

season_date <- season_series %>%
    mutate(date = as.Date(date,format = "%Y-%m-%d")) %>%
    group_by(series) %>%
    ggplot(aes(x = date, y = avg_rating, color = factor(series)))+ geom_point() + geom_line() + ylim(0,10) + labs(
        title = "Average rating across date",
        x = "season",
        y = "average rating",
        fill = "series"
    )
season_date
```

```{r}
season_rating <- whoverse %>%
    filter(season == 1) %>%
    ggplot(aes(x = number, y = average, color = factor(series))) + geom_point() + geom_line() + labs(
        title = "Average rating across season 1",
        x = "episode",
        y = "average rating",
        fill = "series"
    )
season_rating
```

giyv

```{r}
first_time <- whoverse %>%
    filter(series == 6) %>%
    mutate(airdates = as.Date(airdate,format = "%Y-%m-%d")) %>%
    ggplot(aes(x = airdates,y = average, color = factor(season), group = season)) +geom_point() + geom_line() + ylim(0,9) + labs(
        title = "Average rating across series 6 (Timey_whimy)",
        x = "date",
        y = "average rating",
        fill = "season"
    )
first_time
```

khyulv

```{r}
episode_data %>%
    ggplot(aes(x = as.numeric(averageRuntime), y = as.numeric(rating.average))) + geom_point() + geom_line() + ylim(0,10) + labs(
        title = "Average runtime vs average rating across series",
        x = "average runtime",
        y = "average rating"
    )
```

fhxykc
